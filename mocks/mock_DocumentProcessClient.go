// Code generated by MockGen. DO NOT EDIT.
// Source: doc-translate-go/proto/gen/go/proto/documentprocessor/v1 (interfaces: DocumentProcessorClient)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_DocumentProcessClient.go -package=mocks doc-translate-go/proto/gen/go/proto/documentprocessor/v1 DocumentProcessorClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	documentprotov1 "doc-translate-go/proto/gen/go/proto/documentprocessor/v1"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDocumentProcessorClient is a mock of DocumentProcessorClient interface.
type MockDocumentProcessorClient struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentProcessorClientMockRecorder
}

// MockDocumentProcessorClientMockRecorder is the mock recorder for MockDocumentProcessorClient.
type MockDocumentProcessorClientMockRecorder struct {
	mock *MockDocumentProcessorClient
}

// NewMockDocumentProcessorClient creates a new mock instance.
func NewMockDocumentProcessorClient(ctrl *gomock.Controller) *MockDocumentProcessorClient {
	mock := &MockDocumentProcessorClient{ctrl: ctrl}
	mock.recorder = &MockDocumentProcessorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentProcessorClient) EXPECT() *MockDocumentProcessorClientMockRecorder {
	return m.recorder
}

// ProcessDocument mocks base method.
func (m *MockDocumentProcessorClient) ProcessDocument(arg0 context.Context, arg1 *documentprotov1.DocumentRequest, arg2 ...grpc.CallOption) (*documentprotov1.DocumentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessDocument", varargs...)
	ret0, _ := ret[0].(*documentprotov1.DocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessDocument indicates an expected call of ProcessDocument.
func (mr *MockDocumentProcessorClientMockRecorder) ProcessDocument(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDocument", reflect.TypeOf((*MockDocumentProcessorClient)(nil).ProcessDocument), varargs...)
}
