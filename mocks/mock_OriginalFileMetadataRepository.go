// Code generated by MockGen. DO NOT EDIT.
// Source: doc-translate-go/pkg/file/repository (interfaces: OriginalFileMetadataRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_OriginalFileMetadataRepository.go -package=mocks doc-translate-go/pkg/file/repository OriginalFileMetadataRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "doc-translate-go/pkg/file/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOriginalFileMetadataRepository is a mock of OriginalFileMetadataRepository interface.
type MockOriginalFileMetadataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOriginalFileMetadataRepositoryMockRecorder
}

// MockOriginalFileMetadataRepositoryMockRecorder is the mock recorder for MockOriginalFileMetadataRepository.
type MockOriginalFileMetadataRepositoryMockRecorder struct {
	mock *MockOriginalFileMetadataRepository
}

// NewMockOriginalFileMetadataRepository creates a new mock instance.
func NewMockOriginalFileMetadataRepository(ctrl *gomock.Controller) *MockOriginalFileMetadataRepository {
	mock := &MockOriginalFileMetadataRepository{ctrl: ctrl}
	mock.recorder = &MockOriginalFileMetadataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOriginalFileMetadataRepository) EXPECT() *MockOriginalFileMetadataRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOriginalFileMetadataRepository) Create(arg0 *entity.OriginalFileMetadata) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOriginalFileMetadataRepositoryMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOriginalFileMetadataRepository)(nil).Create), arg0)
}

// DeleteById mocks base method.
func (m *MockOriginalFileMetadataRepository) DeleteById(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockOriginalFileMetadataRepositoryMockRecorder) DeleteById(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockOriginalFileMetadataRepository)(nil).DeleteById), arg0)
}

// DeleteByIds mocks base method.
func (m *MockOriginalFileMetadataRepository) DeleteByIds(arg0 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIds", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIds indicates an expected call of DeleteByIds.
func (mr *MockOriginalFileMetadataRepositoryMockRecorder) DeleteByIds(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIds", reflect.TypeOf((*MockOriginalFileMetadataRepository)(nil).DeleteByIds), arg0)
}

// ListByFilenameIsid mocks base method.
func (m *MockOriginalFileMetadataRepository) ListByFilenameIsid(arg0, arg1 string) ([]*entity.OriginalFileMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByFilenameIsid", arg0, arg1)
	ret0, _ := ret[0].([]*entity.OriginalFileMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByFilenameIsid indicates an expected call of ListByFilenameIsid.
func (mr *MockOriginalFileMetadataRepositoryMockRecorder) ListByFilenameIsid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByFilenameIsid", reflect.TypeOf((*MockOriginalFileMetadataRepository)(nil).ListByFilenameIsid), arg0, arg1)
}

// ListByIds mocks base method.
func (m *MockOriginalFileMetadataRepository) ListByIds(arg0 []int) ([]*entity.OriginalFileMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByIds", arg0)
	ret0, _ := ret[0].([]*entity.OriginalFileMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByIds indicates an expected call of ListByIds.
func (mr *MockOriginalFileMetadataRepositoryMockRecorder) ListByIds(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByIds", reflect.TypeOf((*MockOriginalFileMetadataRepository)(nil).ListByIds), arg0)
}

// ListByIsid mocks base method.
func (m *MockOriginalFileMetadataRepository) ListByIsid(arg0 string) ([]*entity.OriginalFileMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByIsid", arg0)
	ret0, _ := ret[0].([]*entity.OriginalFileMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByIsid indicates an expected call of ListByIsid.
func (mr *MockOriginalFileMetadataRepositoryMockRecorder) ListByIsid(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByIsid", reflect.TypeOf((*MockOriginalFileMetadataRepository)(nil).ListByIsid), arg0)
}

// Update mocks base method.
func (m *MockOriginalFileMetadataRepository) Update(arg0 *entity.OriginalFileMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOriginalFileMetadataRepositoryMockRecorder) Update(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOriginalFileMetadataRepository)(nil).Update), arg0)
}
